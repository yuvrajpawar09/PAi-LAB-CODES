section .data
    s1 db "Hello world!", 0       ; First string
    lens1 equ $ - s1              ; Length of s1

    s2 db "Hello, world", 0       ; Second string
    lens2 equ $ - s2              ; Length of s2

    msg_eq db "Strings are equal", 0  ; Message for equal strings
    len_eq equ $ - msg_eq            ; Length of the message

    msg_neq db "Strings are not equal", 0  ; Message for unequal strings
    len_neq equ $ - msg_neq             ; Length of the message

section .text
    global _start

_start:
    ; Compare strings s1 and s2
    mov esi, s1                    ; Address of s1
    mov edi, s2                    ; Address of s2
    mov ecx, lens1                 ; Length of s1

    ; Check lengths first
    cmp lens1, lens2
    jne not_equal                  ; If lengths differ, strings are not equal

    repe cmpsb                     ; Compare strings byte by byte
    jne not_equal                  ; If mismatch found, jump to not_equal

equal:
    ; If strings are equal, display "Strings are equal"
    mov eax, 4                     ; Syscall for write
    mov ebx, 1                     ; File descriptor (stdout)
    mov ecx, msg_eq                ; Message to write
    mov edx, len_eq                ; Message length
    int 0x80                       ; Make the syscall
    jmp exit                       ; Exit the program

not_equal:
    ; If strings are not equal, display "Strings are not equal"
    mov eax, 4                     ; Syscall for write
    mov ebx, 1                     ; File descriptor (stdout)
    mov ecx, msg_neq               ; Message to write
    mov edx, len_neq               ; Message length
    int 0x80                       ; Make the syscall

exit:
    mov eax, 1                     ; EXIT syscall
    xor ebx, ebx                   ; Exit status 0
    int 0x80
